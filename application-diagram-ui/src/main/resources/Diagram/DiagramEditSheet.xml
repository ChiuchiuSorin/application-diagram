<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.2" reference="Diagram.DiagramEditSheet" locale="">
  <web>Diagram</web>
  <name>DiagramEditSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1493735733000</creationDate>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1568955700000</date>
  <contentUpdateDate>1568955700000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="Diagram.ResourceSelector.WebHome" /}}

{{velocity output="false"}}
#macro (diagramLinkModal)
  &lt;div class="modal" id="diagramLinkModal" tabindex="-1" role="dialog"
      aria-labelledby="diagramLinkModal-label" data-backdrop="static" data-keyboard="false"&gt;
    &lt;div class="modal-dialog modal-lg" role="document"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
            &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
          &lt;/button&gt;
          &lt;div class="modal-title" id="diagramLinkModal-label"&gt;
            Link
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="modal-body xform"&gt;
          #resourceSelector()
        &lt;/div&gt;
        &lt;div class="modal-footer"&gt;
          &lt;button type="button" class="btn btn-default" data-dismiss="modal"&gt;
            $escapetool.xml($services.localization.render('cancel'))
          &lt;/button&gt;
          &lt;button type="button" class="btn btn-primary"&gt;&lt;/button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
#end
{{/velocity}}

{{velocity}}
{{html clean="false"}}
#if ($doc.getObject('Diagram.DiagramClass'))
  ## Disable the keyboard shortcuts because they prevent the user from typing text inside the diagram (the diagram
  ## editor doesn't use standard text fields for entering the labels for the various shapes the diagram is made of)
  #set ($keyboardShortcutsEnabled = false)
  #set ($discard = $xwiki.ssx.use('Diagram.DiagramSheet'))
  #set ($discard = $xwiki.jsx.use('Diagram.DiagramEditSheet'))
  &lt;div class="diagram-editor loading"&gt;
    &lt;input class="diagram-content" type="hidden" name="content" value="$escapetool.xml($tdoc.content)" /&gt;
    &lt;input class="diagram-svg" type="hidden" name="Diagram.DiagramClass_0_svg"
      value="$!escapetool.xml($doc.getValue('svg'))" /&gt;
  &lt;/div&gt;
  #diagramLinkModal()
#end
{{/html}}
{{/velocity}}</content>
  <object>
    <name>Diagram.DiagramEditSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>f54527c8-9e2a-4f96-8970-a520f93ef866</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/*
#set ($minify = $services.debug.minify != false)
#set ($suffix = "#if ($minify).min#end")
*/
// mxGraph Client Configuration
var mxBasePath = "$services.webjars.url('org.xwiki.contrib:mxgraph-client', '')";
var mxLanguage = '$xcontext.locale';

var mxGraphEditorBasePath = "$services.webjars.url('org.xwiki.contrib:mxgraph-editor', '')";

// Diagram Editor Configuration
var diagramEditorBasePath = "$services.webjars.url('org.xwiki.contrib:draw.io', '')";
var RESOURCES_PATH = diagramEditorBasePath + 'resources';
// Comment out the following line when using the basic mxGraph Editor.
var RESOURCE_BASE = RESOURCES_PATH + '/dia';
var STENCIL_PATH = diagramEditorBasePath + 'stencils';
var IMAGE_PATH = diagramEditorBasePath + 'images';
var STYLE_PATH = CSS_PATH = diagramEditorBasePath + 'styles';
var OPEN_FORM = diagramEditorBasePath + 'open.html';

var SHAPES_PATH = diagramEditorBasePath + 'shapes';
var GRAPH_IMAGE_PATH = diagramEditorBasePath + 'img';
var TEMPLATE_PATH = diagramEditorBasePath + 'templates';

var PROXY_URL = new XWiki.Document('DiagramProxy', 'Diagram').getURL('get');

var isLocalStorage = true;

var urlParams = (function(params) {
  var pairs = window.location.search.substr(1).split('&amp;');
  pairs.forEach(function(pair) {
    var parts = pair.split('=', 2);
    if (parts.length === 2) {
      params[parts[0]] = decodeURIComponent(parts[1].replace(/\+/g, " "));
    }
  });
  return params;
})({
  // Don't show the splash screen.
  'splash': '0',
  // Disable the tabbed UI.
  'pages': '0',
  // Disable the GitHub integration.
  'gh': '0',
  // Disable the GitLab integration.
  'gl': '0',
  // Disable the Dropbox integration.
  'db': '0',
  // Disable the Google Drive integration.
  'gapi': '0',
  // Disable Google Analytics.
  'analytics': '0',
  // Disable the One Drive integration.
  'od': '0',
  // Disable the Trello integration.
  'tr': '0'
});

// Disabling the integration with these external services is not enough because the draw.io code has hard-coded references.
var DriveFile = DropboxFile = GitHubFile = OneDriveFile = TrelloFile = false;

require.config({
  paths: {
    'mxgraph-init': diagramEditorBasePath + 'js/draw.io.init$suffix',
    'mxgraph-client': mxBasePath + 'mxClient.bundle$suffix',
    'jscolor': mxGraphEditorBasePath + 'jscolor/jscolor.min',
    'sanitizer': mxGraphEditorBasePath + 'sanitizer/sanitizer.min',
    'mxgraph-editor': mxGraphEditorBasePath + 'mxGraphEditor$suffix',
    'base64': mxGraphEditorBasePath + 'deflate/base64.min',
    'pako': mxGraphEditorBasePath + 'deflate/pako.min',
    'spin': diagramEditorBasePath + 'js/spin/spin.min',
    'jszip': diagramEditorBasePath + 'js/jszip/jszip.min',
    'draw.io': diagramEditorBasePath + 'js/draw.io$suffix',
    'xwiki-utils': new XWiki.Document('DiagramSheet', 'Diagram').getURL('jsx', 'minify=$minify'),
    'diagram-utils': new XWiki.Document('DiagramSheet', 'Diagram').getURL('jsx', 'minify=$minify'),
    'diagram-link-handler': new XWiki.Document('DiagramSheet', 'Diagram').getURL('jsx', 'minify=$minify'),
    'resourceSelector': new XWiki.Document('WebHome', 'Diagram.ResourceSelector').getURL('jsx', 'minify=$minify')
  },
  shim: {
    'mxgraph-client': ['mxgraph-init'],
    'mxgraph-editor': ['mxgraph-client', 'jscolor', 'sanitizer'],
    'draw.io': ['mxgraph-editor', 'base64', 'pako-global', 'spin-global', 'jszip-global']
  },
  map: {
    'diagram-utils': {
      'mxgraph-common': 'mxgraph-editor'
    },
    'diagram-link-handler': {
      'draw.io.common': 'draw.io'
    }
  }
})

define('pako-global', ['pako'], function(pako) {
  // draw.io expects a global variable.
  window.pako = pako;
});

define('spin-global', ['spin'], function(spin) {
  // draw.io expects a global variable.
  window.Spinner = spin;
});

define('jszip-global', ['jszip'], function(JSZip) {
  // draw.io expects a global variable.
  window.JSZip = JSZip;
});</code>
    </property>
    <property>
      <name>Configuration</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Diagram.DiagramEditSheet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>07b08a89-bce0-494e-89e6-efaef0cfd155</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Adds support for editing diagrams stored in XWiki pages.
 */
define('diagram-store', ['jquery', 'xwiki-meta', 'xwiki-utils', 'diagram-utils', 'draw.io', 'xwiki-events-bridge'],
    function($, xm, xutils, diagramUtils) {
  var files = [];
  window._xfiles = files;
  var createFile = function(ui, input, title) {
    var file = new XWikiFile(ui, input, title);
    files.push(file);
    return file;
  };

  var XWikiFile = function(ui, input, title) {
    DrawioFile.call(this, ui);
    this.input = input;
    this.title = title;
  };

  mxUtils.extend(XWikiFile, DrawioFile);

  $.extend(XWikiFile.prototype, {
    getMode: function() {
      return 'xwiki';
    },
    getTitle: function() {
      return this.title;
    },
    getData: function() {
      return this.input.val();
    },
    setData: function(data) {
      this.input.val(data);
    },
    updateFileData: function() {
      // We overwrite the base implementation because we don't want to support files that contain multiple diagrams.
      // Also, we remove draw.io version from clipart paths for saving the relative links. This is needed as a fix for:
      // https://github.com/xwikisas/application-diagram/issues/11 .
      var graphXML = mxUtils.getPrettyXml(this.ui.editor.getGraphXml());
      this.setData(graphXML.replace(/image=[\w/%.]*\/img/g, 'image=/img'));
    },
    open: function() {
      var graphXML = diagramUtils.addLibraryInfo(this.getData() || '&lt;mxGraphModel/&gt;');
      this.ui.editor.setGraphXml(mxUtils.parseXml(graphXML).documentElement);
      this.changeListener = mxUtils.bind(this, function(sender, eventObject) {
        this.setModified(true);
      });
      this.ui.editor.graph.model.addListener(mxEvent.CHANGE, this.changeListener);
    }
  });

  var forEachOpenedFile = function(visitor) {
    files.forEach(function(file) {
      if (file.getUi() &amp;&amp; file.getUi().getCurrentFile() === file) {
        visitor(file);
      }
    });
  };

  var updateFormFields = function(event) {
    forEachOpenedFile(function(file) {
      // This is a workaround for https://github.com/jgraph/drawio/issues/490
      // Stop editing for getting the latest content from diagram
      file.ui.editor.graph.stopEditing(false);
      file.updateFileData();
    });
  };

  var resetDirty = function() {
    forEachOpenedFile(function(file) {
      file.setModified(false);
    });
  };

  var pipeDeferred = function(left, right) {
    left.done($.proxy(right, 'resolve')).fail($.proxy(right, 'reject'));
  };

  var saveCanvasAsAttachment = function(canvas) {
    var deferred = $.Deferred();
    var docRef = xm.documentReference;
    var attachmentName = (docRef.name == 'WebHome' ? docRef.parent.name : docRef.name) + '.thumbnail.png';
    // Keep only the last version of the attachment. Since 'toBlob' is not supported by IE the attachment won't be
    // saved in this browser, falling back to the use of svg for pdf export.
    xutils.deleteAttachment(attachmentName).always(function() {
      try {
        canvas.toBlob(function(blob) {
          pipeDeferred(xutils.uploadAttachment(blob, attachmentName), deferred);
        });
      } catch(err) {
        console.log(err);
        deferred.reject();
      }
    });
    return deferred.promise();
  };

  var saveFileAsImageAttachment = function(file) {
    var deferred = $.Deferred();
    file.getUi().exportToCanvas(function(canvas) {
      if (canvas) {
        pipeDeferred(saveCanvasAsAttachment(canvas), deferred);
      } else {
        deferred.reject();
      }
    }, null, null, null, function(e) {
      new XWiki.widgets.Notification(
        $jsontool.serialize($services.localization.render('diagram.editor.saveAsImageAttachmentError')), 'error');
    }, null, true);
    return deferred.promise();
  };

  var uploadInProgress = false;
  // Save the diagram as an image attachment on this page. Stop the default save until the upload action is completed
  // and trigger it after. Used for export as pdf.
  $(document).on('xwiki:actions:beforeSave', function(event, data) {
    forEachOpenedFile(function(file) {
      if (file.isModified() &amp;&amp; !uploadInProgress) {
        uploadInProgress = true;
        event.preventDefault();
        // This is for older versions of XWiki (&lt;10.8.1) where we had to stop the original event.
        if (data &amp;&amp; data.originalEvent &amp;&amp; typeof data.originalEvent.stop === 'function') {
          data.originalEvent.stop();
        }
        saveFileAsImageAttachment(file).always(function() {
          var button = $('input[name=action_save' + (data &amp;&amp; data['continue'] ? 'andcontinue' : '') + ']');
          button.click();
        });
      } else {
        uploadInProgress = false;
      }
    });
  });

  // We need to update the form fields before the form is validated (for Preview, Save and Save &amp; Continue).
  $(document).on('xwiki:actions:beforePreview xwiki:actions:beforeSave', updateFormFields);

  $(document).on('xwiki:actions:beforeSave', function() {
    forEachOpenedFile(function(file) {
      var svgInput = file.input.next('.diagram-svg');
      if (svgInput.length &gt; 0) {
        var svgRoot = file.getUi().editor.graph.getSvg('#ffffff', true, false, false, null, true);
        // Have relative clipart paths inside the cached svg for not saving draw.io version as well.
        svgInput.val(mxUtils.getXml(svgRoot).replace(/href="[\w:/%.]*\/img/g, 'href="/img'));
      }
    });
  });

  var submitInProgress = false;
  // Disable the leave confirmation when the form action buttons are used.
  $(document).on('xwiki:actions:cancel xwiki:actions:preview xwiki:actions:save xwiki:document:saved',
    function(event, data) {
      // We reset the dirty field on 'xwiki:actions:save' only if it's not a Save &amp; Continue. Otherwise we wait for
      // 'xwiki:document:saved' to be sure the document was saved.
      if (!data || !data['continue']) {
        submitInProgress = event.type === 'xwiki:actions:preview' || event.type === 'xwiki:actions:save';
        resetDirty();
      }
    });

  $(window).on('beforeunload', function(event) {
    // Update the form fields before the page is unloaded in order to allow the browser to cache their values
    // (Back-Forward and Soft Reload cache). The form fields have already been updated (for validation) if a submit
    // is currently in progress.
    if (!submitInProgress) {
      updateFormFields();
    } else {
      submitInProgress = false;
    }
  });

  return {
    createFile: createFile
  };
});</code>
    </property>
    <property>
      <name>Diagram Store</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Diagram.DiagramEditSheet</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>a9be39c0-68be-4333-ac14-93fcee0a275b</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Overrides the link dialog in order to support creating links to wiki pages.
 */
define('diagram-link-editor', ['jquery', 'diagram-link-handler', 'draw.io', 'resourceSelector'], function($, diagramLinkHandler) {
  EditorUi.prototype.showLinkDialog = function(value, selectLabel, callback) {
    $('#diagramLinkModal').selectResource(diagramLinkHandler.getResourceReferenceFromCustomLink(value), {
      selectLabel: selectLabel
    }).done(function(resourceReference) {
      callback(diagramLinkHandler.getCustomLinkFromResourceReference(resourceReference));
    });
  };
});

define('diagram-editor', ['jquery', 'diagram-store', 'diagram-utils', 'xwiki-utils', 'diagram-link-editor'], function($,
  diagramStore, diagramUtils, xutils) {

  // These variables are used to decide if an image should be uploaded at original resolution or
  // should be declined for being too big.
  // Default values:
  // EditorUi.prototype.maxImageSize = 520;
  // EditorUi.prototype.maxImageBytes = 1000000;

  //
  // Diagram Editor Constructor.
  //
  var createDiagramEditor = function(options) {
    options = options || {};
    var editor = new Editor(/* chromeless: */ uiTheme === 'min', options.themes, /* model: */ null, /* graph: */ null,
      /* editable: */ true);
    var editorUI = new App(editor, options.container);
    // Fix the editor UI before loading the diagram because layout changes can influence the way the shapes are drawn.
    fixEditorUI(editorUI);
    var file = diagramStore.createFile(editorUI, options.input, options.fileName);
    // The first letter of the file name is used to determine the storage type. Let's use 'X' for XWiki storage.
    editorUI.loadFile('X' + options.fileName, true, file);
    return editorUI;
  };

  var fixEditorUI = function(editorUI) {
    hideFooter(editorUI);
    cleanMenu(editorUI);
    fixKeyboardShortcutsAction(editorUI);
    removeCompactModeToggle(editorUI);
    fixFullScreenToggle(editorUI);
    fixEditorButtons($(editorUI.container));
  };

  //
  // Disable the tabbed UI (setting urlParams['pages'] to '0' is not enough..)
  //
  EditorUi.prototype.initPages = function() {
    // Do nothing.
  };

  // Don't change the document title.
  App.prototype.updateDocumentTitle = function() {};

  //
  // Add support for disabling an entire sub-menu.
  //
  var originalAddSubmenu = Menus.prototype.addSubmenu;
  Menus.prototype.addSubmenu = function(name, menu, parent) {
    var subMenu = this.get(name);
    if (subMenu &amp;&amp; subMenu.visible !== false) {
      originalAddSubmenu.apply(this, arguments);
    }
  };

  // Remove the language picker because the diagram editor is configured to use the XWiki language.
  var originalCreateMenubar = Menus.prototype.createMenubar;
  Menus.prototype.createMenubar = function(container) {
    delete this.menus['language'];
    return originalCreateMenubar.apply(this, arguments);
  }

  //
  // Add support for not displaying 'browser' option from 'Import from' sub-menu
  //
  var originalAddItem = mxPopupMenu.prototype.addItem;
  mxPopupMenu.prototype.addItem = function(title, image, funct, parent, iconCls, enabled, active) {
    if (title === (mxResources.get('browser') + '...') &amp;&amp; parent &amp;&amp; parent.innerText === 'Import from') {
      return null;
    }
    return originalAddItem.apply(this, arguments);
  };

  //
  // Hide the editor footer.
  //
  var hideFooter = function(editorUI) {
    // We call this just in case the footer is visible.
    editorUI.hideFooter();
    // Make sure the diagram editor doesn't leave space for the footer.
    editorUI.footerHeight = 0;
  };

  //
  // Clean the editor menu by removing the features that are not needed.
  //
  var cleanMenu = function(editorUI) {
    // Disable and hide some of the menu entries.
    [
      // File menu
      'synchronize', 'new', 'open', 'save', 'saveAs', 'rename', 'makeCopy', 'close',
      // Extras menu
      'autosave', 'showStartScreen', 'plugins', 'offline', 'chromeApp',
       // Help menu
      'downloadDesktop', 'useOffline',
      // ExportAs
      'exportHtml'
    ].forEach(function(actionName) {
      var action = editorUI.actions.actions[actionName];
      if (action) {
        action.enabled = action.visible = false;
      }
    });

    // Disable and hide some of the sub-menus.
    [
      // File menu
      'openFrom', 'openRecent', 'publish', 'embed',
      // Extras menu
      'theme'
    ].forEach(function(name) {
      var subMenu = editorUI.menus.get(name);
      if (subMenu) {
        subMenu.enabled = subMenu.visible = false;
      }
    });
  };

  // Fix the base URL used when exporting the diagram as image.
  var originalCreateImageUrlConverter = EditorUi.prototype.createImageUrlConverter;
  EditorUi.prototype.createImageUrlConverter = function() {
    var converter = originalCreateImageUrlConverter.call(this);
    converter.convert = function(src) {
      // Use baseDomain instead of baseUrl to detect external URLs.
      if (src &amp;&amp; (src.substr(0, 7) === 'http://' || src.substr(0, 8) === 'https://') &amp;&amp;
          src.substr(0, converter.baseDomain.length) !== converter.baseDomain) {
        src = PROXY_URL + '?url=' + encodeURIComponent(src);
      }
      return src;
    };
    return converter;
  };

  // Override for uploading the image as attachment instead of encode it to Base64.
  var originalImportFiles = EditorUi.prototype.importFiles;
  EditorUi.prototype.importFiles = function(files, x, y, maxSize, fn, resultFn, filterFn, barrierFn, resizeDialog,
                                             maxBytes, resampleThreshold, ignoreEmbeddedXml) {
    var newArgs = arguments;
    if (fn) {
      var newArgs = Array.prototype.slice.call(arguments);
      newArgs[4] = function(data, mimeType, x, y, w, h) {
        if (data.substring(0, 5) == 'data:') {
          let currentFile = files[0];
          xutils.uploadAttachment(currentFile, currentFile.name).done(function() {
            let doc = XWiki.currentDocument;
            let xwikiURL = xutils.getAttachmentURL(currentFile.name);
            fn.apply(this, [xwikiURL, mimeType, x, y, w, h]);
          });
        } else {
          fn.apply(this, arguments);
        }
      }
    }
    originalImportFiles.apply(this, newArgs);
  }

  var originalLoadUrl = EditorUi.prototype.loadUrl;
  EditorUi.prototype.loadUrl = function(url, success, error, forceBinary, retry, dataUriPrefix) {
    let exportedUrl = diagramUtils.getParameterValueFromURL('url', url);
    if (exportedUrl) {
      let diagramXML = diagramUtils.getDiagramXMLFromURL(exportedUrl);
      if (diagramXML) {
        return success(diagramXML);
      }
    }
    return originalLoadUrl.apply(this, arguments);
  };

  //
  // Change the URL generated by export for containing the actual host.
  //
  var originalCreateLink = EditorUi.prototype.createLink;
  EditorUi.prototype.createLink = function() {
    let rawURL = originalCreateLink.apply(this, arguments);
    // Do not include '#' because it's automatically added by getURL function below.
    let documentFragmentIndex = rawURL.indexOf('#');
    let documentFragment = rawURL.substring(documentFragmentIndex + 1);
    if (documentFragment.substring(0, 1) == 'R') {
      let queryString = '';
      let queryStringIndex = rawURL.indexOf('?');
      if (queryStringIndex &gt; -1) {
        queryString = rawURL.substring (queryStringIndex + 1, documentFragmentIndex);
      }
      // Append source parameter to the query
      queryString += '&amp;source=url';
      return window.location.protocol + '//' + window.location.host +
        new XWiki.Document('DiagramViewSheet', 'Diagram').getURL('view', queryString, documentFragment);
    }
    return rawURL;
  }

  //
  // Fix the side bar tool tip: the tool tip position is computed as if the editor takes the full screen.
  //
  Sidebar.prototype.getTooltipOffset = function() {
    // Adjust the tool tip coordinates with the editor offset.
    var offset = $(this.editorUi.container).offsetParent().offset();
    return {x: offset.left, y: offset.top};
  };

  //
  // Overwrite the Keyboard Shortcuts action because it uses the wrong URL.
  //
  var fixKeyboardShortcutsAction = function(editorUI) {
    var keyboardShortcutsAction = editorUI.actions.get('keyboardShortcuts');
    if (keyboardShortcutsAction) {
      var originalFunct = keyboardShortcutsAction.funct;
      keyboardShortcutsAction.funct = function() {
        if (mxClient.IS_SVG) {
          window.open(diagramEditorBasePath + 'shortcuts.svg');
        } else {
          originalFunct.apply(this, arguments);
        }
      };
    }
  };

  //
  // Remove the compact mode toggle and update the position of the remaining buttons.
  //
  var removeCompactModeToggle = function(editorUI) {
    if (typeof editorUI.toggleCompactMode === 'function') {
      editorUI.toggleCompactMode(true);
      var buttons = $(editorUI.container).find('.geToolbarContainer &gt; a.geButton');
      buttons.last().remove();
      buttons.css('right', function(index, value) {
        return (parseInt(value) - 16) + 'px';
      });
    }
  };

  var fullScreen = new XWiki.widgets.FullScreen();
  var fixFullScreenToggle = function(editorUI) {
    mxEvent.removeAllListeners(editorUI.fullscreenElement);
    editorUI.container._x_fullScreenActivator = editorUI.fullscreenElement;
    $(editorUI.fullscreenElement).click(function(event) {
      event.preventDefault();
      var isFullScreen = $(editorUI.container).parent('.fullScreenWrapper').length &gt; 0;
      if (isFullScreen) {
        // Exit full screen mode.
        fullScreen.closeFullScreen();
        editorUI.toggleCompactMode(true);
      } else {
        // Enter full screen mode.
        fullScreen.makeFullScreen(editorUI.container);
        // The previous line hides the 'fullScreenActivator' and shows the 'Exit Full Screen' button. We want to use the
        // 'fullScreenActivator' for exiting the full screen mode. The 'Exit Full Screen' button is hidden from CSS.
        $(editorUI.fullscreenElement).show();
        editorUI.toggleCompactMode();
      }
    });
  };

  //
  // Add the type of the buttons manually to stop the default submit. The preventDefault used in editDiagram is not
  // working for these since in draw.io code is called stopPropagation.
  //
  var fixEditorButtons = function(editor) {
    editor.find('button:not([type])').each(function() {
      $(this).attr('type', 'button');
    });
  };

  // mxRuler adds the ruler to the document body instead of adding it to the editor container.
  var originalMxDualRuler = mxDualRuler;
  mxDualRuler = function(editorUI, unit) {
    originalMxDualRuler.apply(this, arguments);
    $([this.hRuler.container, this.vRuler.container]).appendTo(editorUI.container);
  };
  mxDualRuler.prototype = Object.create(originalMxDualRuler.prototype);
  mxDualRuler.prototype.constructor = mxDualRuler;

  //
  // jQuery plugin
  //
  var themes = {};
  $.fn.editDiagram = function(options) {
    return this.on('click', 'button', function(event) {
      // Make sure the buttons from the editor UI don't submit the edit form.
      event.preventDefault();
    }).on('keydown keyup keypress', '.geContentEditable', function(event) {
      // Make sure the keyboard events triggered from the nested editable sections are not propagated as they may
      // trigger shortcut keys (the nested editable sections need to behave like input fields).
      // See issue #15: If you install XWebIDE Application you can't use "W" letter in the diagram text.
      event.stopPropagation();
    }).each(function() {
      // We need this CSS class on the body element in order to have proper styling for the UI elements (menus, dialogs,
      // tooltips) that are added directly under the body element.
      $(document.body).addClass('geEditor');
      createDiagramEditor($.extend({
        container: this,
        themes: themes,
        fileName: $('#document-title').text() || XWiki.currentPage,
        input: $(this).children('input.diagram-content')
      }, options));
      $(this).removeClass('loading');
    });
  };

  return diagramUtils.loadTranslationAndTheme().done(function(theme) {
    // Configure the default editor theme.
    themes[Graph.prototype.defaultThemeName] = theme;
  });
});</code>
    </property>
    <property>
      <name>Diagram Editor</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Diagram.DiagramEditSheet</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>1787d86a-d14d-400e-94d8-6de104a43cde</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery', 'diagram-editor'], function($, diagramEditorPromise) {
  diagramEditorPromise.done(function() {
    $('.diagram-editor').editDiagram();
  });
});</code>
    </property>
    <property>
      <name>Startup</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
